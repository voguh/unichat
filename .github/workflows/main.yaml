name: main.yaml

on:
  release:
    types:
      - created
  push:
    branches:
      - '**'
  workflow_dispatch:

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.7.1'
  RUST_VERSION: '1.87.0'
  TAURI_APP_PATH: ${{ github.workspace }}
  TAURI_FRONTEND_PATH: ${{ github.workspace }}/webapp

jobs:
  webapp-build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: webapp/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm install --frozen-lockfile

      - name: Run lint
        continue-on-error: true
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm lint

      - name: Run tests
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm test run --passWithNoTests

      - name: Build webapp
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm build:ui

      - name: Upload webapp artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

  rust-build:
    runs-on: ubuntu-24.04
    needs: webapp-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download webapp artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

      - name: Setup tauri dependencies
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev jq

      - name: Rust toolchain setup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache cargo registry
        uses: actions/cache@v4.2.3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/

      - name: Run format
        continue-on-error: true
        run: cargo fmt --all -- --check

      - name: Run lint
        continue-on-error: true
        run: cargo clippy --all-targets --all-features

      - name: Run lint
        run: cargo test --all-targets --all-features

      - name: Prepare configuration
        run: |
          npm install -g @tauri-apps/cli
          jq '.build.beforeBuildCommand = ""' tauri.conf.json > tauri.conf.tmp
          mv tauri.conf.tmp tauri.conf.json

      - name: Run build for linux
        run: tauri build

      - name: Prepare windows environment
        run: |
          sudo apt install -y  nsis lld llvm clang cmake ninja-build nasm
          rustup target add x86_64-pc-windows-msvc
          cargo install --locked cargo-xwin

      - name: Run build for windows
        run: tauri build --runner cargo-xwin --target x86_64-pc-windows-msvc

      - name: Setup version
        id: setup_version
        run: |
          export CARGO_PACKAGE_VERSION="$(cargo pkgid | cut -d# -f2)"
          if [ "$GITHUB_EVENT_NAME" == "release" ]; then
            if [ "$CARGO_PACKAGE_VERSION" != "$GITHUB_REF_NAME" ]; then
              echo "Error: The version in Cargo.toml ($CARGO_PACKAGE_VERSION) does not match the release tag ($GITHUB_REF_NAME)."
              exit 1
            fi
            echo "revision=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          else
            export SHORT_CARGO_VERSION="$(echo $CARGO_PACKAGE_VERSION | cut -d '-' -f1)"
            export NEW_VERSION="$SHORT_CARGO_VERSION+$GITHUB_SHA"
            sed -i "s/^version = \"$CARGO_PACKAGE_VERSION\"/version = \"$NEW_VERSION\"/" "Cargo.toml"
            echo "revision=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Print revision
        run: echo "Revision is ${{ steps.setup_version.outputs.revision }}"

      - name: Move build artifacts
        run: |
          export VERSION="${{ steps.setup_version.outputs.revision }}"
          mkdir -p dist/appimage dist/deb dist/rpm dist/windows
          cp target/release/bundle/appimage/*.AppImage dist/appimage/unichat-$VERSION.AppImage
          cp target/release/bundle/deb/*.deb dist/deb/unichat-$VERSION.deb
          cp target/release/bundle/rpm/*.rpm dist/rpm/unichat-$VERSION.rpm
          cp target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe dist/windows/unichat-$VERSION.exe
          for folder in dist/*; do
            if [ -d "$folder" ]; then
              (cd "$folder" && for file in ./*; do sha256sum "$file" > "${file}.sha256"; done)
            fi
          done

      - name: Upload artifacts
        uses: ./.github/actions/upload-artifact
        with:
          GITHUB_TOKEN: ${{ github.token }}
          base-folder: dist
          prefix: unichat-${{ steps.setup_version.outputs.revision }}

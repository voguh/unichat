name: main.yaml

on:
  release:
    types:
      - created
  push:
    branches:
      - '**'
  workflow_dispatch:

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.7.1'
  RUST_VERSION: '1.87.0'
  TAURI_APP_PATH: ${{ github.workspace }}
  TAURI_FRONTEND_PATH: ${{ github.workspace }}/webapp

jobs:
  webapp-install-dependencies:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: webapp/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm install --frozen-lockfile

  webapp-lint:
    runs-on: ubuntu-24.04
    needs: webapp-install-dependencies
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: webapp/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm install --frozen-lockfile

      - name: Run lint
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm lint

  webapp-tests:
    runs-on: ubuntu-24.04
    needs: webapp-install-dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: webapp/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm install --frozen-lockfile

      - name: Run tests
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm test run --passWithNoTests

  webapp-build:
    runs-on: ubuntu-24.04
    needs: webapp-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: webapp/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm install --frozen-lockfile

      - name: Build webapp
        working-directory: ${{ env.TAURI_FRONTEND_PATH }}
        run: pnpm build:ui

      - name: Upload webapp artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

  rust-install-dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2022]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Rust toolchain setup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache cargo registry
        uses: actions/cache@v4.2.3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          path: |
            ${{ env.HOME }}/.cargo/bin/
            ${{ env.HOME }}/.cargo/registry
            ${{ env.HOME }}/.cargo/git
            ${{ github.workspace }}/target

      - name: Install dependencies
        run: cargo fetch --locked

  rust-lint:
    runs-on: ubuntu-24.04
    needs: [webapp-build, rust-install-dependencies]
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download webapp artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

      - name: Setup tauri dependencies
        run: |
          sudo apt update
          sudo apt install --no-install-recommends -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust toolchain setup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4.2.3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          path: |
            ${{ env.HOME }}/.cargo/bin/
            ${{ env.HOME }}/.cargo/registry
            ${{ env.HOME }}/.cargo/git
            ${{ github.workspace }}/target

      - name: Install dependencies
        run: cargo fetch --locked

      - name: Run lint
        run: cargo clippy --all-targets --all-features

  rust-tests:
    runs-on: ${{ matrix.os }}
    needs: [webapp-build, rust-install-dependencies]
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2022]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download webapp artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

      - name: Setup tauri dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt update
          sudo apt install --no-install-recommends -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust toolchain setup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache cargo registry
        uses: actions/cache@v4.2.3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          path: |
            ${{ env.HOME }}/.cargo/bin/
            ${{ env.HOME }}/.cargo/registry
            ${{ env.HOME }}/.cargo/git
            ${{ github.workspace }}/target

      - name: Install dependencies
        run: cargo fetch --locked

      - name: Run test
        run: cargo test --all-targets --all-features

  package:
    runs-on: ${{ matrix.os }}
    needs: rust-tests
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2022]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download webapp artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: webapp-dist
          path: ${{ env.TAURI_FRONTEND_PATH }}/dist

      - name: Setup tauri dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt update
          sudo apt install --no-install-recommends -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust toolchain setup
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache cargo registry
        uses: actions/cache@v4.2.3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          path: |
            ${{ env.HOME }}/.cargo/bin/
            ${{ env.HOME }}/.cargo/registry
            ${{ env.HOME }}/.cargo/git
            ${{ github.workspace }}/target

      - name: Install dependencies
        run: cargo fetch --locked

      - name: Prepare configuration
        run: |
          npm install -g @tauri-apps/cli
          node -e "let fs = require('fs'); let path = require('path'); let cPath = path.join(__dirname, 'tauri.conf.json'); let c = JSON.parse(fs.readFileSync(cPath)); c.build.beforeBuildCommand = ''; fs.writeFileSync(cPath, JSON.stringify(c, null, 4));"

      - name: Run build app
        run: tauri build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.os }}-bundles
          path: ${{ github.workspace }}/target/release/bundle

  publish:
    runs-on: ubuntu-24.04
    needs: package
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download windows build artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: windows-2022-bundles
          path: ${{ github.workspace }}/target/windows

      - name: Download linux build artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: ubuntu-24.04-bundles
          path: ${{ github.workspace }}/target/linux

      - name: Setup version
        id: setup_version
        run: |
          export CARGO_PACKAGE_VERSION="$(cargo pkgid | cut -d# -f2)"
          if [ "$GITHUB_EVENT_NAME" == "release" ]; then
            if [ "$CARGO_PACKAGE_VERSION" != "$GITHUB_REF_NAME" ]; then
              echo "Error: The version in Cargo.toml ($CARGO_PACKAGE_VERSION) does not match the release tag ($GITHUB_REF_NAME)."
              exit 1
            fi
            echo "revision=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          else
            export SHORT_CARGO_VERSION="$(echo $CARGO_PACKAGE_VERSION | cut -d '-' -f1)"
            export NEW_VERSION="$SHORT_CARGO_VERSION+$GITHUB_SHA"
            sed -i "s/^version = \"$CARGO_PACKAGE_VERSION\"/version = \"$NEW_VERSION\"/" "Cargo.toml"
            echo "revision=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Print revision
        run: echo "Revision is ${{ steps.setup_version.outputs.revision }}"

      - name: Move build artifacts
        run: |
          export VERSION="${{ steps.setup_version.outputs.revision }}"
          mkdir -p dist/appimage dist/deb dist/rpm dist/windows
          cp ${{ github.workspace }}/target/linux/appimage/*.AppImage dist/appimage/unichat-$VERSION.AppImage
          cp ${{ github.workspace }}/target/linux/deb/*.deb dist/deb/unichat-$VERSION.deb
          cp ${{ github.workspace }}/target/linux/rpm/*.rpm dist/rpm/unichat-$VERSION.rpm
          cp ${{ github.workspace }}/target/windows/nsis/*.exe dist/nsis/unichat-$VERSION-setup.exe
          for folder in dist/*; do
            if [ -d "$folder" ]; then
              (cd "$folder" && for file in ./*; do sha256sum "$file" > "${file}.sha256"; done)
            fi
          done

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        shell: bash
        run: |
          if [ -n "$(command -v gh)" ]; then
            echo "GitHub CLI is installed. Proceeding with to create a GitHub Release."
            echo "${{ inputs.GITHUB_TOKEN }}" | gh auth login --with-token
            for folder in ${{ github.workspace }}/dist/*; do
              if [ -d "$folder" ] && [ "$(ls -A "$folder")" ]; then
                echo "Uploading files from: $folder"
                for file in $folder/*; do
                  if [ -f "$file" ]; then
                    echo "Uploading file: $file"
                    gh release upload $GITHUB_REF_NAME "$file" || echo "Failed to upload $file to GitHub Release"
                  fi
                done
              fi
            done
            echo "All files uploaded to GitHub Release successfully."
          else
            echo "GitHub CLI is not installed. Skipping upload to GitHub Release."
            exit 0
          fi


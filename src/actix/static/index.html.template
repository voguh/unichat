<!DOCTYPE html>
<!--
/*!******************************************************************************
 * UniChat
 * Copyright (C) 2025 Voguh <voguhofc@protonmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 ******************************************************************************/
-->
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <title>Widget | Voguh's UniChat</title>

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/normalize.css@8.0.1/normalize.min.css" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/animate.css@4.1.1/animate.min.css" />
        <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

        <style>
            {{WIDGET_STYLE}}
        </style>
        <script defer>
            document.addEventListener("DOMContentLoaded", () => {
                function connect() {
                    const socket = new WebSocket('ws://localhost:9527/ws')

                    socket.addEventListener("open", () => {
                        window.dispatchEvent(new CustomEvent("unichat:connected"));
                    })

                    socket.addEventListener("message", (message) => {
                        const event = JSON.parse(message.data);

                        if (event.type === "unichat:history") {
                            for (const cachedEvent of event.data) {
                                window.dispatchEvent(new CustomEvent("unichat:event", { detail: cachedEvent }));
                            }
                        } else {
                            window.dispatchEvent(new CustomEvent("unichat:event", { detail: event }));
                        }
                    });

                    socket.addEventListener("close", () => {
                        console.log("Socket disconnected. Attempting to reconnect in 1 second...");
                        setTimeout(connect, 1000);
                    });

                    socket.addEventListener("error", (err) => {
                        console.error("Socket encountered error: ", err.message, "Closing socket");
                        socket.close();
                    });
                }

                connect();

                window.addEventListener("message", ({ data: event }) => {
                    if (event.type === "unichat:event") {
                        window.dispatchEvent(new CustomEvent("unichat:event", { detail: event.detail }));
                    }
                });
            });
        </script>
        <script defer>
            document.addEventListener("DOMContentLoaded", () => {
                {{WIDGET_SCRIPT}}
            });
        </script>
    </head>
    <body>
        {{WIDGET_HTML}}
    </body>
</html>
